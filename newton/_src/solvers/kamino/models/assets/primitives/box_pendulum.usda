#usda 1.0
(
    doc = """Authored manually for testing purposes."""
    defaultPrim = "box_pendulum"
    timeCodesPerSecond = 1000
    kilogramsPerUnit = 1
    metersPerUnit = 1
    upAxis = "Z"
)

def PhysicsScene "World"
{
    float physics:gravityMagnitude = 9.8067
    vector3f physics:gravityDirection = (0, 0, -1)
}

def Xform "box_pendulum"
{
    def Scope "RigidBodies"
    {
        def Xform "body" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        )
        {
            # Body Frame
            quatf xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:translate = (0.25, 0.0, 0.75)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient"]

            # Body Velocities
            vector3f physics:linearVelocity = (0, 0, 0)
            vector3f physics:angularVelocity = (0, 0, 0)

            # Mass Properties
            float physics:mass = 1.0
            float3 physics:diagonalInertia = (0.0016666667070239782, 0.021666666492819786, 0.021666666492819786)
            point3f physics:centerOfMass = (0, 0, 0)
            quatf physics:principalAxes = (1, 0, 0, 0)

            def Scope "Geometry"
            {
                def Cube "box" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    float3 xformOp:scale = (0.25, 0.05, 0.05)
                    quatf xformOp:orient = (1, 0, 0, 0)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }
    }

    def Scope "Joints"
    {
        def PhysicsRevoluteJoint "grounding" (
            prepend apiSchemas = ["PhysicsDriveAPI:angular"]
        )
        {
            bool physics:jointEnabled = 1

            rel physics:body1 = </box_pendulum/RigidBodies/body>

            uniform token physics:axis = "Y"

            point3f physics:localPos0 = (0.0, 0.0, 0.75)
            point3f physics:localPos1 = (-0.25, 0.0, 0.0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)

            bool physics:collisionEnabled = 1

            float physics:lowerLimit = -inf
            float physics:upperLimit = inf

            float drive:angular:physics:maxForce = inf
            float drive:angular:physics:targetPosition = 0.0
            float drive:angular:physics:targetVelocity = 0.0
            float drive:angular:physics:stiffness = 0.0
            float drive:angular:physics:damping = 0.0
            uniform token drive:angular:physics:type = "force"
        }
    }

    def Scope "StaticGeometry"
    {
        def Cube "plane" (
            # NOTE: "MaterialBindingAPI" is required for the material binding to work.
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]

            float3 xformOp:scale = (1.0, 1.0, 0.05)
            quatf xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:translate = (0, 0, -0.05)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            rel material:binding:physics = </box_on_plane/Materials/Concrete> (
                bindMaterialAs = "weakerThanDescendants"
            )

            color3f[] primvars:displayColor = [(0.8, 0.8, 0.8)]
        }
    }

    def Scope "Meshes"
    {
    }

    def Scope "Materials"
    {
    }

    def PhysicsCollisionGroup "Collisions"
    {
        rel collection:colliders:includes = [
            </box_pendulum/RigidBodies/body>,
        ]
        rel physics:filteredGroups = </box_pendulum/Collisions>
    }
}


